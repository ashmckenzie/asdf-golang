#!/usr/bin/env bash
set -eu
[ "${BASH_VERSINFO[0]}" -ge 3 ] && set -o pipefail

PLUGIN_DIR="$(dirname "${BASH_SOURCE[0]}")/.."

# shellcheck source=/dev/null
source "$PLUGIN_DIR/lib/helpers.sh"

get_arch () {
    local arch=""
    local uname_output=""
    local platform=$1

    if [ "$platform" == "darwin" ]; then
        uname_output="$(arch -arm64 uname -m 2> /dev/null || uname -m)"
    else
        uname_output="$(uname -m)"
    fi

    case "$uname_output" in
        x86_64|amd64) arch="amd64"; ;;
        i686|i386) arch="386"; ;;
        armv6l|armv7l) arch="armv6l"; ;;
        aarch64|arm64) arch="arm64"; ;;
        ppc64le) arch="ppc64le"; ;;
        *)
            fail "Arch '$(uname -m)' not supported!"
            ;;
    esac

    echo -n $arch
}

check_shasum() {
    local archive_file_name=$1
    local authentic_checksum_file=$2
    local authentic_checksum=""

    authentic_checksum=$(<"$authentic_checksum_file")

    if command -v sha256sum >/dev/null 2>&1; then
        sha256sum \
            -c <<<"$authentic_checksum $archive_file_name"
    elif command -v shasum >/dev/null 2>&1; then
        shasum \
        -a 256 \
        -c <<<"$authentic_checksum $archive_file_name"
    else
        fail "sha256sum or shasum is not available for use"
    fi
}

download_golang () {
    local version=$1
    local download_path=$2
    local platform=""
    local arch=""

    platform=$(get_platform)
    arch=$(get_arch $platform)

    curl "https://dl.google.com/go/go${version}.${platform}-${arch}.tar.gz" -o "${download_path}/archive.tar.gz"
    curl "https://dl.google.com/go/go${version}.${platform}-${arch}.tar.gz.sha256" -o "${download_path}/archive.tar.gz.sha256"

    echo 'verifying checksum'
    if ! check_shasum "${download_path}/archive.tar.gz" "${download_path}/archive.tar.gz.sha256"; then
        fail "Authenticity of package archive can not be assured. Exiting."
    else
      msg "checksum verified"
    fi
}

download_golang "$ASDF_INSTALL_VERSION" "$ASDF_DOWNLOAD_PATH"
